name: Build and Push Docker Image

on:
  push:
    branches: ["master"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: namishh/com

jobs:
  build-and-push:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_COMMIT=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Deploy to Coolify
        run: |
          curl --request GET '${{ secrets.COOLIFY_WEBHOOK_URL }}' --header 'Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}'

      - name: Wait for deployment
        run: |
          echo "Waiting up to 5 minutes (initial 20s + 51 attempts * 5s) for deployment..."
          sleep 20 # initial wait for docker to update

          for i in {1..51}; do
            echo "Checking deployment status... (attempt $i/51)"
            response=$(curl --fail -s --max-time 5 https://namishh.com/health || echo "error")

            if [[ "$response" != "error" ]]; then
              commit=$(echo "$response" | jq -r '.commit' 2>/dev/null || echo "")
              echo "Current deployed commit: $commit"
              if [[ -n "$commit" && "$commit" = "${{ github.sha }}" ]]; then
                echo "Deployment successful!"
                exit 0
              fi
            else
              echo "Health check endpoint not ready or returned error."
            fi

            sleep 5
          done

          echo "Deployment timed out or failed verification after multiple attempts."
          exit 1
